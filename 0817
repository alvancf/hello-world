flashScrollIndicators 
const debounce = (func, delay) => {
  let timeout;
  return function (...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), delay);
  };
};

const scrollToSpecificItem = debounce(() => {
  flatListRef.current.scrollToItem({
    item: DATA[49],
    animated: true,
    viewPosition: 0.5,
  });
}, 300); // 防抖处理，300ms 内只触发一次


import React from 'react';
import { SafeAreaView, View, VirtualizedList, StyleSheet, Text } from 'react-native';
import Constants from 'expo-constants';
    testContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f2f2f7ff',
        height: 40,
      },
 item: {
      backgroundColor: '#f9c2ff',
      height: 40,
      justifyContent: 'center',
      marginVertical: 8,
      marginHorizontal: 16,
    },
    title: {
      fontSize: 32,
    },
const GENERATED_DATA = Array.from({length: 100}, (_, index) => ({
  id: Math.random().toString(12).substring(0),
  title: `Item ${index + 1}`,
}));
    const Item = ({title}) => (
      <View style={styles.item}>
        <Text style={styles.title}>{title}</Text>
      </View>
    );
      <View style={styles.viewStyle}>
        <View testID="test_container" style={styles.testContainer}>
            <Text style={{paddingTop:10,paddingLeft:10}}>实际效果:</Text>
            <Button
            title='Toggle1'
            onPress={() => {ref.current.scrollToItem({item: GENERATED_DATA[2], animated: true});} }
            ></Button>
          <Button
            title='Toggle2'
            onPress={() => {
              ref.current?.scrollToItem({
                animated: true,
                item: CCDATA[2],
              });
            }}
          ></Button>
        </View>
                 <VirtualizedList
              ref = {vRef}
              initialNumToRender={10}
              data={GENERATED_DATA}
              renderItem={(item) => <Item title={item.title} />}
              keyExtractor={item => item.id}
              getItemCount={() => GENERATED_DATA.length}
              getItem={(data, index) => GENERATED_DATA[index]}
              />
        {/* <VirtualizedList
          data={DATA}
          initialNumToRender={4}
          renderItem={({ item }) => <Item title={item.title} />}
          keyExtractor={item => item.key}
          getItemCount={getItemCount}
          getItem={getItem}
        /> */}
        {/* <FlatList
          ref={ref}
          renderItem={({ item }) => <Item title={item.title} />}
          keyExtractor={item => item.id}
          data={DATA}
        /> */}
      </View>

 viewStyle:{
      width:300,
      height:240,
      marginBottom:30,
      borderWidth:1,
      borderColor:'black',
      borderStyle:'solid',
      marginLeft:40,
    },


const DATA = [];
const getItem = (data, index) => {
  return {
    id: Math.random().toString(12).substring(0),
    title: `Item ${index+1}`
  }
}
const getItemCount = (data) => {
  return 50;
}
const Item = ({ title })=> {
  return (
    <View style={styles.item}>
      <Text style={styles.title}>{title}</Text>
    </View>
  );
}
const VirtualizedListExample = () => {
  return (
    <SafeAreaView style={styles.container}>
      <VirtualizedList
        data={DATA}
        initialNumToRender={4}
        renderItem={({ item }) => <Item title={item.title} />}
        keyExtractor={item => item.key}
        getItemCount={getItemCount}
        getItem={getItem}
      />
    </SafeAreaView>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
  item: {
    backgroundColor: '#f9c2ff',
    height: 150,
    justifyContent: 'center',
    marginVertical: 8,
    marginHorizontal: 16,
    padding: 20,
  },
  title: {
    fontSize: 32,
  },
});
export default VirtualizedListExample;
