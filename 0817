<View style={{flex: 1, backgroundColor: 'red'}}>
<View
style={{
width: 100,
height: 100,
backgroundColor: 'yellow',
position: 'absolute',
bottom: 0,
left: 0,
top: 'auto'
}}></View>
</View>


import WebView from '@ohos.web.webview';
// import { RNBaseView } from './Views/RNBaseView';

@Entry
@Component
export struct PageWebHybrid {
  private scrollerForScroll: Scroller = new Scroller()
  private controller: WebView.WebviewController = new WebView.WebviewController();
  @State arr: number[] = []

  aboutToAppear(): void {
    for (let i = 0; i < 20; i++) {
      this.arr.push(i)
    }
  }

  build() {
    Scroll(this.scrollerForScroll) {
      Column() {
        this.initWebView()
        Row().width('100%').height(26).backgroundColor('#F4F5F8')

        // 1. 这里不加Scroll时，上面的web和下面的原生list可以完美适配嵌套滚动；
        // 2. 加了Scroll之后，web和list同时出现在屏幕时，可以单独滚动list（不合理）；
        // 3. 加了Scroll之后，web和RN列表的情况，RN还是能单独滚动，不符合要求。
        // rn的内容相当于不加nestedScroll的initList组件，由于我们不支持这个属性，无法在initList上设置nestedScroll属性
        Scroll() {
          // RNBaseView()
          //   .enabled(this.listEnabled)
          this.initList()
        }
        .nestedScroll({
          scrollForward: NestedScrollMode.SELF_FIRST,
          scrollBackward: NestedScrollMode.PARENT_FIRST
        })

      }
    }.width("100%")
    .scrollBar(BarState.Off)
    .backgroundColor('#ffffff')
  }

  @Builder
  initList() {
    Tabs({ barPosition: BarPosition.Start }) {
      TabContent() {
        List({ space: 10 }) {
          ForEach(this.arr, (item: number) => {
            ListItem() {
              Text("item" + item)
                .fontSize(16)
            }.height(72)
            .width("100%")
            .backgroundColor(Color.Gray)
          }, (item: string) => item)
        }.width("100%")
        .edgeEffect(EdgeEffect.Spring)
        // .nestedScroll({  // 这里为了使底部list下拉时可以滚动父组件Scroll
        //   scrollForward: NestedScrollMode.PARENT_FIRST,
        //   scrollBackward: NestedScrollMode.SELF_FIRST
        // })
      }.tabBar("Tab1")
      TabContent() {
      }.tabBar("Tab2")
    }
    .vertical(false)
    .height("100%")
  }

  @Builder
  initWebView() {
    Web({
      src: 'https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/application-dev-guide-V5?catalogVersion=V5', //`resource://rawfile/test.html`,
      controller: this.controller,
    })
      .nestedScroll({
        scrollForward: NestedScrollMode.SELF_FIRST,
        scrollBackward: NestedScrollMode.PARENT_FIRST,
      })
      .domStorageAccess(true)
      .onlineImageAccess(true)
      .imageAccess(true)
      .zoomAccess(false)
      .javaScriptAccess(true)
      .fileAccess(true)
      .geolocationAccess(true)
      .cacheMode(CacheMode.None)
      .verticalScrollBarAccess(false)
      .horizontalScrollBarAccess(false)
      .overScrollMode(OverScrollMode.NEVER)
      .onOverrideUrlLoading((webResourceRequest: WebResourceRequest) => {
        const url = webResourceRequest.getRequestUrl() ?? ''
        console.log("StatusDetail-onOverrideUrlLoading :" + url);
        return true;
      })
      .height('100%')
  }
}
