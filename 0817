 public async runJSBundle(jsBundleProvider: JSBundleProvider, info?:string | null) {
    const stopTracing = this.logger.clone("runJSBundle").startTracing()
    const bundleURL = jsBundleProvider.getURL()
    const isMetroServer = jsBundleProvider.getHotReloadConfig() !== null
    try {
      if(info === undefined) {
        this.devToolsController.eventEmitter.emit("SHOW_DEV_LOADING_VIEW", this.id,
          `Loading from ${jsBundleProvider.getHumanFriendlyURL()}...`)
      }else if(info) {
        this.devToolsController.eventEmitter.emit("SHOW_DEV_LOADING_VIEW", this.id,
          `${info.slice(0, 255)}`)
      }

      // 1、如果没填走现有逻辑
      // 2、如果填的空字符串或者null，不调用哪个
      // 3、如果填的字符串，那么长度最大255截断！
      // 255 len
      this.bundleExecutionStatusByBundleURL.set(bundleURL, "RUNNING")
      const jsBundle = await jsBundleProvider.getBundle((progress) => {
        this.devToolsController.eventEmitter.emit("SHOW_DEV_LOADING_VIEW", this.id,
          `Loading from ${jsBundleProvider.getHumanFriendlyURL()} (${Math.round(progress * 100)}%)`)
      })
      this.initialBundleUrl = this.initialBundleUrl ?? jsBundleProvider.getURL()
      await this.napiBridge.loadScript(this.id, jsBundle, bundleURL)
      this.napiBridge.setBundlePath(this.id, jsBundleProvider.getURL());
      this.lifecycleState = LifecycleState.READY
      const hotReloadConfig = jsBundleProvider.getHotReloadConfig()
      if (hotReloadConfig) {
        this.callRNFunction("HMRClient", "setup",
          ["harmony", hotReloadConfig.bundleEntry, hotReloadConfig.host, hotReloadConfig.port, true])
        this.logger.info("Configured hot reloading")
      }
      const isRemoteBundle = bundleURL.startsWith("http")
      if (this.shouldEnableDebugger && isRemoteBundle) {
        DevServerHelper.connectToDevServer(bundleURL, this.logger, this.napiBridge.getInspectorWrapper());
      }
      this.bundleExecutionStatusByBundleURL.set(bundleURL, "DONE")
      this.lifecycleEventEmitter.emit("JS_BUNDLE_EXECUTION_FINISH", {
        jsBundleUrl: bundleURL,
        appKeys: jsBundleProvider.getAppKeys()
      })
    } catch (err) {
      this.bundleExecutionStatusByBundleURL.delete(bundleURL)
      if (err instanceof JSBundleProviderError) {
        this.logger.error(err)
      } else {
        const suggestions: string[] = []
        if (isMetroServer) {
          suggestions.push("Please check your Metro Server console. Likely, the error details you need are displayed there.")
        }
        suggestions.push("Please revise your application code. It may contain syntax errors or unhandled exceptions at the top level that could be causing runtime failures.")
        this.logger.error(new RNOHError({
          whatHappened: "Couldn't run a JS bundle",
          howCanItBeFixed: suggestions,
          extraData: err,
        }))
      }
    } finally {
      this.devToolsController.eventEmitter.emit("HIDE_DEV_LOADING_VIEW", this.id)
      stopTracing()
    }
  }
