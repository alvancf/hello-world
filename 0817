import Curves from '@ohos.curves'

@Entry
@Component
struct ScrollExample {
  scroller: Scroller = new Scroller()
  private arr: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

  build() {
    Stack({ alignContent: Alignment.TopStart }) {
      Scroll(this.scroller) {
        Column() {
          ForEach(this.arr, (item: number) => {
            Text(item.toString())
              .width('90%')
              .height(150)
              .backgroundColor(0xFFFFFF)
              .borderRadius(15)
              .fontSize(16)
              .textAlign(TextAlign.Center)
              .margin({ top: 10 })
          }, (item: string) => item)
          TextInput()
        }.width('100%')
      }
      .scrollable(ScrollDirection.Vertical) // 滚动方向纵向
      .scrollBar(BarState.On) // 滚动条常驻显示
      .scrollBarColor(Color.Gray) // 滚动条颜色
      .scrollBarWidth(10) // 滚动条宽度
      .friction(0.6)
      .edgeEffect(EdgeEffect.None)
      .onScroll((xOffset: number, yOffset: number) => {
        console.log('yOffset' , yOffset)
      })
      .onScrollEdge((side: Edge) => {
        console.info('To the edge')
      })
      .onScrollStop(() => {
        console.info('Scroll Stop')
      })

      Button('scroll 150')
        .height('5%')
        .onClick(() => { // 点击后下滑指定距离150.0vp
          this.scroller.scrollBy(0, 150)
        })
        .margin({ top: 10, left: 20 })
      Button('scroll 100')
        .height('5%')
        .onClick(() => { // 点击后滑动到指定位置，即下滑100.0vp的距离
          const yOffset: number = this.scroller.currentOffset().yOffset;
          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100 })
        })
        .margin({ top: 60, left: 20 })
      Button('scroll 100')
        .height('5%')
        .onClick(() => { // 点击后滑动到指定位置，即下滑100.0vp的距离，滑动过程配置有动画
          let curve = Curves.interpolatingSpring(10, 1, 228, 30) //创建一个阶梯曲线
          const yOffset: number = this.scroller.currentOffset().yOffset;
          this.scroller.scrollTo({ xOffset: 0, yOffset: yOffset + 100, animation: { duration: 1000, curve: curve } })
        })
        .margin({ top: 110, left: 20 })
      Button('back top')
        .height('5%')
        .onClick(() => { // 点击后回到顶部
          this.scroller.scrollEdge(Edge.Top)
        })
        .margin({ top: 160, left: 20 })
      Button('next page')
        .height('5%')
        .onClick(() => { // 点击后滑到下一页
          this.scroller.scrollPage({ next: true })
        })
        .margin({ top: 210, left: 20 })
    }.width('100%').height('100%').backgroundColor(0xDCDCDC)
    .expandSafeArea([SafeAreaType.KEYBOARD])
  }
}

import { Tester, TestSuite, TestCase } from '@rnoh/testerino';
import React, { useEffect, useRef, useState } from 'react';
import { View, TextInput, StyleSheet, Dimensions, Text, ScrollView } from 'react-native';


function BugMeasureDemo() {
    
    const viewRef = useRef<View | null>(null);
    
    const [pageH, setpageH] = useState(0);
    
    const [measurePageY, setmeasurePageY] = useState(0);
    
    useEffect(() => {
        setpageH( Dimensions.get('window').height);
        const tid = setInterval(getPageY, 1000);
        return () => {
            clearInterval(tid);
        }
    }, []);
    
    const getPageY = () => {
        viewRef.current?.measure((x, y, width, height, pageX, pageY) => {
            setmeasurePageY(pageY);
        });
    } 
    
    return (
        <>
            <ScrollView>
            <Tester>
                <TestSuite name='Measure Bug'>
                    {
                        Array.from({length: 12}).map((_, i) => 
                        <TestCase key={i} itShould={`TextInput ${i}`}>
                            <TextInput style={styles.inp} />
                        </TestCase>
                        )
                    }
                    <TestCase itShould={`点击输入框键盘弹起，计算的PageY发生错误`}>
                        <Text>windowHeight: {pageH}</Text>
                        <Text>PageY: {measurePageY}</Text>
                        <View ref={viewRef}>
                            <TextInput style={[styles.inp, {borderColor: '#000'}]} />
                        </View>
                    </TestCase>
                </TestSuite>
            </Tester>
            </ScrollView>
        </>
    )
}

const styles = StyleSheet.create({
    inp: {
        height: 36,
        borderWidth: 1,
        borderColor: '#f0f0f0',
        borderRadius: 6
    }
})

export default BugMeasureDemo
