https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-scroll-V5#%E7%A4%BA%E4%BE%8B3

import React from 'react';
import { TextInput, Alert, SafeAreaView, Button } from 'react-native';

const MyComponent = () => {
  const [codeText, setCodeText] = React.useState<string>()
  const textChange = (text: string) => {
    setCodeText('')
}

  const onKey = (event) => {
    console.log(event.nativeEvent.key)
    if (event.nativeEvent.key === 'Backspace') {
      Alert.alert('Backspace Key Pressed');
    }
  }
  return (
    <SafeAreaView>
      <TextInput
      style = {{borderWidth: 1}}
        value={codeText}
        onChangeText={(text) => textChange(text)}
        onKeyPress={onKey}
      />
      <Button title=' Press me ' onPress={()=>{setCodeText('')}}/>
    </SafeAreaView>


  );
};

export default MyComponent;

@Entry
@Component
struct Index {

  build() {
    Scroll(){
      Column(){
        Column(){
          Text('测试')
        }
        .height(1000)
        TextInput()
      }
    }
    .height('100%')
    .width('100%')
    .expandSafeArea([SafeAreaType.KEYBOARD])
  }
}


https://docs.openharmony.cn/pages/v4.1/zh-cn/application-dev/reference/apis-core-file-kit/js-apis-file-fileuri.md

https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/reference/apis-network-kit/js-apis-http.md

https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-custom-component-lifecycle-V5#onbackpress  router路由的
https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-basic-components-navdestination-V5#onbackpressed10  navigation路由的

import { Tester, TestSuite, TestCase } from '@rnoh/testerino';
import React, { useEffect, useRef, useState } from 'react';
import { View, TextInput, StyleSheet, Dimensions, Text, ScrollView } from 'react-native';


function BugMeasureDemo() {
    
    const viewRef = useRef<View | null>(null);
    
    const [pageH, setpageH] = useState(0);
    
    const [measurePageY, setmeasurePageY] = useState(0);
    
    useEffect(() => {
        setpageH( Dimensions.get('window').height);
        const tid = setInterval(getPageY, 1000);
        return () => {
            clearInterval(tid);
        }
    }, []);
    
    const getPageY = () => {
        viewRef.current?.measure((x, y, width, height, pageX, pageY) => {
            setmeasurePageY(pageY);
        });
    } 
    
    return (
        <>
            <ScrollView>
            <Tester>
                <TestSuite name='Measure Bug'>
                    {
                        Array.from({length: 12}).map((_, i) => 
                        <TestCase key={i} itShould={`TextInput ${i}`}>
                            <TextInput style={styles.inp} />
                        </TestCase>
                        )
                    }
                    <TestCase itShould={`点击输入框键盘弹起，计算的PageY发生错误`}>
                        <Text>windowHeight: {pageH}</Text>
                        <Text>PageY: {measurePageY}</Text>
                        <View ref={viewRef}>
                            <TextInput style={[styles.inp, {borderColor: '#000'}]} />
                        </View>
                    </TestCase>
                </TestSuite>
            </Tester>
            </ScrollView>
        </>
    )
}

const styles = StyleSheet.create({
    inp: {
        height: 36,
        borderWidth: 1,
        borderColor: '#f0f0f0',
        borderRadius: 6
    }
})

export default BugMeasureDemo


import React from 'react';
import { TextInput, Alert, SafeAreaView } from 'react-native';

const MyComponent = () => {
  const handleKeyPress = (event) => {
    console.log("event.nativeEvent.key: ", event.nativeEvent.key)
    if (event.nativeEvent.key === 'Backspace' || event.nativeEvent.key === 'Delete') {
      Alert.alert('Backspace Key Pressed');
    }
  };

  return (
    <SafeAreaView>
    <TextInput
      style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
      onKeyPress={handleKeyPress}
    />
    </SafeAreaView>
  );
};

export default MyComponent;

<View style={{flex: 1, backgroundColor: 'red'}}>
<View
style={{
width: 100,
height: 100,
backgroundColor: 'yellow',
position: 'absolute',
bottom: 0,
left: 0,
top: 'auto'
}}></View>
</View>

import {useState} from 'react';
import {
View,
StyleSheet,
Text,
TouchableOpacity,
TextInput,
} from 'react-native';
import React from 'react';

const Demo = () => {
const [autoFocus1, setAutoFocus1] = useState(false);
const [autoFocus2, setAutoFocus2] = useState(false);
const [autoFocus3, setAutoFocus3] = useState(false);
const [autoFocus4, setAutoFocus4] = useState(false);

return (
<View style={{paddingTop: 50}}>
<View style={{flexDirection: 'row'}}>
<View style={{width: 200, height: 100}}>
{autoFocus1 ? (
<TextInput
style={{
borderColor: 'red',
borderWidth: 1,
width: 100,
height: 50,
}}
autoFocus={autoFocus1}
/>
) : (
<TouchableOpacity
onPress={() => {
setAutoFocus1(true);
setAutoFocus2(false);
}}>
<Text
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}>
çş˘č‰˛čž“ĺ…ĽćĄ†
</Text>
</TouchableOpacity>
)}
</View>
<View style={{width: 200, height: 100}}>
{autoFocus2 ? (
<TextInput
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}
autoFocus={autoFocus2}
/>
) : (
<TouchableOpacity
onPress={() => {
setAutoFocus2(true);
setAutoFocus1(false);
}}>
<Text
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}>
č“č‰˛čž“ĺ…ĽćĄ†
</Text>
</TouchableOpacity>
)}
</View>
</View>
<View style={{flexDirection: 'row', marginTop: 40}}>
<View style={{width: 200, height: 100}}>
{autoFocus3 ? (
<TextInput
style={{
borderColor: 'red',
borderWidth: 1,
width: 100,
height: 50,
}}
autoFocus={autoFocus3}
/>
) : (
<TouchableOpacity
onPress={() => {
setAutoFocus3(true);
setAutoFocus4(false);
}}>
<Text
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}>
çş˘č‰˛čž“ĺ…ĽćĄ†
</Text>
</TouchableOpacity>
)}
</View>
<View style={{width: 200, height: 100}}>
{autoFocus4 ? (
<TextInput
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}
autoFocus={autoFocus4}
/>
) : (
<TouchableOpacity
onPress={() => {
setAutoFocus4(true);
setAutoFocus3(false);
}}>
<Text
style={{
borderColor: 'lightblue',
borderWidth: 1,
width: 100,
height: 50,
}}>
č“č‰˛čž“ĺ…ĽćĄ†
</Text>
</TouchableOpacity>
)}
</View>
</View>
</View>
);
};
const styles = StyleSheet.create({});
export default Demo;
