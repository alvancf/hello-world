@Entry
@Component
struct phone_example {
  @State submitValue: string = ''
  @State text: string = ''
  public readonly NUM_TEXT_MAXSIZE_LENGTH = 13
  @State teleNumberNoSpace: string = ""
  @State nextCaret: number = -1 // 用于记录下次光标设置的位置
  @State actualCh: number = -1 // 用于记录光标在第i个数字后插入或者第i个数字前删除
  @State lastCaretPosition: number = 0
  @State lastCaretPositionEnd: number = 0
  controller: TextInputController = new TextInputController()

  isEmpty(str?: string): boolean {
    return str == 'undefined' || !str || !new RegExp("[^\\s]").test(str)
  }

  checkNeedNumberSpace(numText: string) {
    let isSpace: RegExp = new RegExp('[\\+;,#\\*]', 'g')
    let isRule: RegExp = new RegExp('^\\+.*')

    if (isSpace.test(numText)) {
      // 如果电话号码里有特殊字符，就不加空格
      if (isRule.test(numText)) {
        return true
      } else {
        return false
      }
    }
    return true;
  }

  removeSpace(str: string): string {
    if (this.isEmpty(str)) {
      return ''
    }
    return str.replace(new RegExp("[\\s]", "g"), '')
  }

  setCaret() {
    if (this.nextCaret != -1) {
      console.log("to keep caret position right, change caret to", this.nextCaret)
      this.controller.caretPosition(this.nextCaret)
      this.nextCaret = -1
    }
  }

  calcCaretPosition(nextText: string) {
    let befNumberNoSpace: string = this.removeSpace(this.text)
    this.actualCh = 0
    if (befNumberNoSpace.length < this.teleNumberNoSpace.length) { // 插入场景
      for (let i = 0; i < this.lastCaretPosition; i++) {
        if (this.text[i] != ' ') {
          this.actualCh += 1
        }
      }
      this.actualCh += this.teleNumberNoSpace.length - befNumberNoSpace.length
      console.log("actualCh: " + this.actualCh)
      for (let i = 0; i < nextText.length; i++) {
        if (nextText[i] != ' ') {
          this.actualCh -= 1
          if (this.actualCh <= 0) {
            this.nextCaret = i + 1
            break;
          }
        }
      }
    } else if (befNumberNoSpace.length > this.teleNumberNoSpace.length) { // 删除场景
      if (this.lastCaretPosition === this.text.length) {
        console.log("Caret at last, no need to change")
      } else if (this.lastCaretPosition === this.lastCaretPositionEnd) {
        // 按键盘上回退键一个一个删的情况
        for (let i = this.lastCaretPosition; i < this.text.length; i++) {
          if (this.text[i] != ' ') {
            this.actualCh += 1
          }
        }
        for (let i = nextText.length - 1; i >= 0; i--) {
          if (nextText[i] != ' ') {
            this.actualCh -= 1
            if (this.actualCh <= 0) {
              this.nextCaret = i
              break;
            }
          }
        }
      } else {
        // 剪切/手柄选择 一次删多个字符
        this.nextCaret = this.lastCaretPosition // 保持光标位置
      }
    }
  }

  build() {
    Column() {
      Row() {
        TextInput({ text: `${this.text}`, controller: this.controller }).type(InputType.PhoneNumber).height('48vp')
          .onChange((number: string) => {
            this.teleNumberNoSpace = this.removeSpace(number);
            let nextText: string = ""
            if (this.teleNumberNoSpace.length > this.NUM_TEXT_MAXSIZE_LENGTH - 2) {
              nextText = this.teleNumberNoSpace
            } else if (this.checkNeedNumberSpace(number)) {
              if (this.teleNumberNoSpace.length <= 3) {
                nextText = this.teleNumberNoSpace
              } else {
                let split1: string = this.teleNumberNoSpace.substring(0, 3)
                let split2: string = this.teleNumberNoSpace.substring(3)
                nextText = split1 + ' ' + split2
                if (this.teleNumberNoSpace.length > 7) {
                  split2 = this.teleNumberNoSpace.substring(3, 7)
                  let split3: string = this.teleNumberNoSpace.substring(7)
                  nextText = split1 + ' ' + split2 + ' ' + split3
                }
              }
            } else {
              nextText = number
            }
            console.log("onChange Triggered:" + this.text + "|" + nextText + "|" + number)
            if (this.text === nextText && nextText === number) {
              // 此时说明数字已经格式化完成了 在这个时候改变光标位置不会被重置掉
              this.setCaret()
            } else {
              this.calcCaretPosition(nextText)
            }
            this.text = nextText
          })
          .onTextSelectionChange((selectionStart, selectionEnd) => {
            // 记录光标位置
            console.log("selection change: ", selectionStart, selectionEnd)
            this.lastCaretPosition = selectionStart
            this.lastCaretPositionEnd = selectionEnd
          })
      }
    }
    .width('100%')
    .height("100%")
  }
}
